{
    "sourceFile": "app/Http/Controllers/JobVacancyController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1751674025491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751675587346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,94 @@\n <?php\n \n namespace App\\Http\\Controllers;\n \n+use App\\Models\\JobVacancy;\n use App\\Models\\Position;\n use Illuminate\\Http\\Request;\n use Illuminate\\Support\\Str;\n \n-class PositionController extends Controller\n+class JobVacancyController extends Controller\n {\n+    // GET /api/job-vacancies\n     public function index()\n     {\n-        return response()->json(Position::all());\n+        return JobVacancy::with('position')->get();\n     }\n \n+    // POST /api/job-vacancies\n     public function store(Request $request)\n     {\n-        $validated = $request->validate([\n-            'name'   => 'required|string|max:100',\n-            'salary' => 'nullable|numeric',\n-            'level'  => 'nullable|string|max:50',\n+        $data = $request->validate([\n+            'position_title' => 'required|string',\n+            'title'          => 'required|string|max:150',\n+            'description'    => 'required|string',\n+            'requirements'   => 'required|string',\n+            'deadline'       => 'required|date',\n         ]);\n \n-        $position = Position::create([\n-            'position_id' => Str::uuid(),\n-            'name'        => $validated['name'],\n-            'salary'      => $validated['salary'] ?? null,\n-            'level'       => $validated['level'] ?? null,\n+        $position = Position::where('name', $data['position_title'])->first();\n+\n+        if (!$position) {\n+            return response()->json([\n+                'message' => 'Position not found with the given title.'\n+            ], 404);\n+        }\n+\n+        $job = JobVacancy::create([\n+            'vacancy_id'  => Str::uuid(),\n+            'position_id' => $position->position_id,\n+            'title'       => $data['title'],\n+            'description' => $data['description'],\n+            'requirements'=> $data['requirements'],\n+            'deadline'    => $data['deadline'],\n         ]);\n \n-        return response()->json($position, 201);\n+        return response()->json($job, 201);\n     }\n \n+    // GET /api/job-vacancies/{id}\n     public function show($id)\n     {\n-        $position = Position::findOrFail($id);\n-        return response()->json($position);\n+        return JobVacancy::with('position')->findOrFail($id);\n     }\n \n+    // PUT /api/job-vacancies/{id}\n     public function update(Request $request, $id)\n     {\n-        $position = Position::findOrFail($id);\n+        $job = JobVacancy::findOrFail($id);\n \n-        $validated = $request->validate([\n-            'name'   => 'sometimes|string|max:100',\n-            'salary' => 'nullable|numeric',\n-            'level'  => 'nullable|string|max:50',\n+        $data = $request->validate([\n+            'position_title' => 'sometimes|string',\n+            'title'          => 'nullable|string|max:150',\n+            'description'    => 'nullable|string',\n+            'requirements'   => 'nullable|string',\n+            'deadline'       => 'nullable|date',\n         ]);\n \n-        $position->update($validated);\n+        // Jika position_title disertakan, cari position_id-nya\n+        if (isset($data['position_title'])) {\n+            $position = Position::where('name', $data['position_title'])->first();\n \n-        return response()->json($position);\n+            if (!$position) {\n+                return response()->json([\n+                    'message' => 'Position not found with the given title.'\n+                ], 404);\n+            }\n+\n+            $data['position_id'] = $position->position_id;\n+            unset($data['position_title']);\n+        }\n+\n+        $job->update($data);\n+        return response()->json($job);\n     }\n \n+    // DELETE /api/job-vacancies/{id}\n     public function destroy($id)\n     {\n-        $position = Position::findOrFail($id);\n-        $position->delete();\n+        $job = JobVacancy::findOrFail($id);\n+        $job->delete();\n \n-        return response()->json(null, 204);\n+        return response()->json(['message' => 'Deleted']);\n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1751674025491,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Position;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\nclass PositionController extends Controller\n{\n    public function index()\n    {\n        return response()->json(Position::all());\n    }\n\n    public function store(Request $request)\n    {\n        $validated = $request->validate([\n            'name'   => 'required|string|max:100',\n            'salary' => 'nullable|numeric',\n            'level'  => 'nullable|string|max:50',\n        ]);\n\n        $position = Position::create([\n            'position_id' => Str::uuid(),\n            'name'        => $validated['name'],\n            'salary'      => $validated['salary'] ?? null,\n            'level'       => $validated['level'] ?? null,\n        ]);\n\n        return response()->json($position, 201);\n    }\n\n    public function show($id)\n    {\n        $position = Position::findOrFail($id);\n        return response()->json($position);\n    }\n\n    public function update(Request $request, $id)\n    {\n        $position = Position::findOrFail($id);\n\n        $validated = $request->validate([\n            'name'   => 'sometimes|string|max:100',\n            'salary' => 'nullable|numeric',\n            'level'  => 'nullable|string|max:50',\n        ]);\n\n        $position->update($validated);\n\n        return response()->json($position);\n    }\n\n    public function destroy($id)\n    {\n        $position = Position::findOrFail($id);\n        $position->delete();\n\n        return response()->json(null, 204);\n    }\n}"
        }
    ]
}