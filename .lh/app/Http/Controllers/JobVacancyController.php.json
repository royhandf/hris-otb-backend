{
    "sourceFile": "app/Http/Controllers/JobVacancyController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752392834464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752393006183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,24 @@\n             $job->load('position:position_id,name,salary,level');\n \n             return response()->json([\n                 'message' => 'Lowongan pekerjaan berhasil dibuat',\n-                'data' => $job,\n+                'data' => [\n+                    'vacancy_id'   => $job->vacancy_id,\n+                    'position_id'  => $job->position_id,\n+                    'description'  => $job->description,\n+                    'requirements' => $job->requirements,\n+                    'deadline'     => $job->deadline,\n+                    'created_at'   => $job->created_at,\n+                    'updated_at'   => $job->updated_at,\n+                    'position'     => [\n+                        'name'   => $job->position->name ?? null,\n+                        'salary' => $job->position->salary ?? null,\n+                        'level'  => $job->position->level ?? null,\n+                    ],\n+                ]\n             ], 201);\n+            \n         } catch (ValidationException $e) {\n             return response()->json([\n                 'message' => 'Data yang diberikan tidak valid',\n                 'errors' => $e->errors(),\n"
                }
            ],
            "date": 1752392834464,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\JobVacancy;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Validation\\ValidationException;\n\nclass JobVacancyController extends Controller\n{\n    public function index()\n    {\n        try {\n            $jobs = JobVacancy::with('position')->get();\n\n            $formatted = $jobs->map(function ($job) {\n                return [\n                    'vacancy_id'    => $job->vacancy_id,\n                    'position_id'   => $job->position_id,\n                    'position_name' => $job->position->name ?? null,\n                    'salary'        => $job->position->salary ?? null,\n                    'level'         => $job->position->level ?? null,\n                    'description'   => $job->description,\n                    'requirements'  => $job->requirements,\n                    'deadline'      => $job->deadline,\n                    'created_at'    => $job->created_at,\n                    'updated_at'    => $job->updated_at,\n                ];\n            });\n\n            return response()->json([\n                'message' => 'Lowongan pekerjaan berhasil diambil',\n                'data'    => $formatted,\n            ], 200);\n        } catch (\\Exception $e) {\n            return response()->json([\n                'message' => 'Gagal mengambil daftar lowongan pekerjaan',\n                'error' => $e->getMessage(),\n            ], 500);\n        }\n    }\n\n    public function store(Request $request)\n    {\n        try {\n            $validated = $request->validate([\n                'position_id'  => 'required|uuid|exists:positions,position_id',\n                'description'  => 'required|string',\n                'requirements' => 'required|string',\n                'deadline'     => 'required|date',\n            ]);\n\n            $job = JobVacancy::create([\n                'vacancy_id'   => Str::uuid(),\n                'position_id'  => $validated['position_id'],\n                'description'  => $validated['description'],\n                'requirements' => $validated['requirements'],\n                'deadline'     => $validated['deadline'],\n            ]);            \n            $job->load('position:position_id,name,salary,level');\n\n            return response()->json([\n                'message' => 'Lowongan pekerjaan berhasil dibuat',\n                'data' => $job,\n            ], 201);\n        } catch (ValidationException $e) {\n            return response()->json([\n                'message' => 'Data yang diberikan tidak valid',\n                'errors' => $e->errors(),\n            ], 422);\n        } catch (\\Exception $e) {\n            return response()->json([\n                'message' => 'Gagal membuat lowongan pekerjaan',\n                'error' => $e->getMessage(),\n            ], 500);\n        }\n    }\n\n    // GET /api/job-vacancies/{id}\n    public function show($id)\n    {\n        try {\n            $job = JobVacancy::with('position:position_id,name,salary,level')->findOrFail($id);\n\n            if (!$job) {\n                return response()->json([\n                    'message' => 'Lowongan pekerjaan tidak ditemukan',\n                ], 404);\n            }\n            return response()->json([\n                'message' => 'Lowongan pekerjaan berhasil ditemukan',\n                'data' => $job,\n            ], 200);\n        } catch (\\Exception $e) {\n            return response()->json([\n                'message' => 'Gagal mengambil lowongan pekerjaan',\n                'error' => $e->getMessage(),\n            ], 500);\n        }\n    }\n\n    // PUT /api/job-vacancies/{id}\n    public function update(Request $request, $id)\n    {\n        try {\n            $job = JobVacancy::find($id);\n\n            if (!$job) {\n                return response()->json([\n                    'message' => 'Lowongan pekerjaan tidak ditemukan',\n                ], 404);\n            }\n\n            $validated = $request->validate([\n                'position_id'  => 'sometimes|required|uuid|exists:positions,position_id',\n                'description'  => 'sometimes|required|string',\n                'requirements' => 'sometimes|required|string',\n                'deadline'     => 'sometimes|required|date',\n            ]);\n\n            $job->update($validated);\n            $job->load('position:position_id,name,salary,level');\n\n            return response()->json([\n                'message' => 'Lowongan pekerjaan berhasil diperbarui',\n                'data' => $job,\n            ], 200);\n        } catch (ValidationException $e) {\n            return response()->json([\n                'message' => 'Data yang diberikan tidak valid',\n                'errors' => $e->errors(),\n            ], 422);\n        } catch (\\Exception $e) {\n            return response()->json([\n                'message' => 'Gagal memperbarui lowongan pekerjaan',\n                'error' => $e->getMessage(),\n            ], 500);\n        }\n    }\n\n    // DELETE /api/job-vacancies/{id}\n    public function destroy($id)\n    {\n        try {\n            $job = JobVacancy::find($id);\n\n            if (!$job) {\n                return response()->json([\n                    'message' => 'Lowongan pekerjaan tidak ditemukan',\n                ], 404);\n            }\n\n            $job->delete();\n\n            return response()->json([\n                'message' => 'Lowongan pekerjaan berhasil dihapus',\n            ], 200);\n        } catch (\\Exception $e) {\n            return response()->json([\n                'message' => 'Gagal menghapus lowongan pekerjaan',\n                'error' => $e->getMessage(),\n            ], 500);\n        }\n    }\n}"
        }
    ]
}